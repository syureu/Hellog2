{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { pender } from \"redux-pender\";\nimport * as AuthAPI from \"lib/api/auth\";\nimport { Map } from \"immutable\";\nconst LOCAL_REGISTER = \"auth/LOCAL_REGISTER\"; // 이메일 가입\n\nconst LOCAL_LOGIN = \"auth/LOCAL_LOGIN\"; // 이메일 로그인\n\nconst LOGOUT = \"auth/LOGOUT\"; // 로그아웃\n\nconst CHANGE_INPUT = \"auth/CHANGE_INPUT\"; // input 값 변경\n\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\"; // form 초기화\n\nconst CHECK_EMAIL_EXISTS = \"auth/CHECK_EMAIL_EXISTS\"; // 이메일 중복 확인\n\nconst CHECK_USERNAME_EXISTS = \"auth/CHECK_USERNAME_EXISTS\"; // 아이디 중복 확인\n\nconst SET_ERROR = \"auth/SET_ERROR\"; // 오류 설정\n\nexport const changeInput = createAction(CHANGE_INPUT); //  { form, name, value }\n\nexport const initializeForm = createAction(INITIALIZE_FORM); // form\n\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists); // email\n\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists); // username\n\nexport const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister); // { email, username, password }\n\nexport const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin); // { email, password }\n\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\nexport const setError = createAction(SET_ERROR); // { form, message }\n\nconst initialState = Map({\n  register: Map({\n    form: Map({\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      passwordConfirm: \"\"\n    }),\n    exists: Map({\n      email: false,\n      password: false\n    }),\n    error: null\n  }),\n  login: Map({\n    form: Map({\n      username: \"\",\n      password: \"\"\n    }),\n    error: null\n  }),\n  result: Map({})\n}); //reducer\n\nexport default handleActions({\n  [CHANGE_INPUT]: (state, action) => {\n    const {\n      form,\n      name,\n      value\n    } = action.payload;\n    return state.setIn([form, \"form\", name], value);\n  },\n  [INITIALIZE_FORM]: (state, action) => {\n    const initialForm = initialState.get(action.payload);\n    return state.set(action.payload, initialForm);\n  },\n  ...pender({\n    type: CHECK_EMAIL_EXISTS,\n    onSuccess: (state, action) => state.setIn([\"register\", \"exists\", \"email\"], action.payload.data.exists)\n  }),\n  ...pender({\n    type: CHECK_USERNAME_EXISTS,\n    onSuccess: (state, action) => state.setIn([\"register\", \"exists\", \"username\"], action.payload.data.exists)\n  }),\n  ...pender({\n    type: LOCAL_LOGIN,\n    onSuccess: (state, action) => state.set(\"result\", Map(action.payload.data))\n  }),\n  ...pender({\n    type: LOCAL_REGISTER,\n    onSuccess: (state, action) => state.set(\"result\", Map(action.payload.data))\n  }),\n  [SET_ERROR]: (state, action) => {\n    const {\n      form,\n      message\n    } = action.payload;\n    return state.setIn([form, \"error\"], message);\n  }\n}, initialState);","map":{"version":3,"sources":["C:/Users/multicampus/Desktop/2학기/2학기저장소/s03p13d203(sub3)/user-create-loginout/src/redux/modules/auth.js"],"names":["createAction","handleActions","pender","AuthAPI","Map","LOCAL_REGISTER","LOCAL_LOGIN","LOGOUT","CHANGE_INPUT","INITIALIZE_FORM","CHECK_EMAIL_EXISTS","CHECK_USERNAME_EXISTS","SET_ERROR","changeInput","initializeForm","checkEmailExists","checkUsernameExists","localRegister","localLogin","logout","setError","initialState","register","form","email","username","password","passwordConfirm","exists","error","login","result","state","action","name","value","payload","setIn","initialForm","get","set","type","onSuccess","data","message"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\n\nimport { pender } from \"redux-pender\";\nimport * as AuthAPI from \"lib/api/auth\";\nimport { Map } from \"immutable\";\n\nconst LOCAL_REGISTER = \"auth/LOCAL_REGISTER\"; // 이메일 가입\nconst LOCAL_LOGIN = \"auth/LOCAL_LOGIN\"; // 이메일 로그인\n\nconst LOGOUT = \"auth/LOGOUT\"; // 로그아웃\n\nconst CHANGE_INPUT = \"auth/CHANGE_INPUT\"; // input 값 변경\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\"; // form 초기화\nconst CHECK_EMAIL_EXISTS = \"auth/CHECK_EMAIL_EXISTS\"; // 이메일 중복 확인\nconst CHECK_USERNAME_EXISTS = \"auth/CHECK_USERNAME_EXISTS\"; // 아이디 중복 확인\nconst SET_ERROR = \"auth/SET_ERROR\"; // 오류 설정\n\nexport const changeInput = createAction(CHANGE_INPUT); //  { form, name, value }\nexport const initializeForm = createAction(INITIALIZE_FORM); // form\nexport const checkEmailExists = createAction(\n  CHECK_EMAIL_EXISTS,\n  AuthAPI.checkEmailExists\n); // email\nexport const checkUsernameExists = createAction(\n  CHECK_USERNAME_EXISTS,\n  AuthAPI.checkUsernameExists\n); // username\n\nexport const localRegister = createAction(\n  LOCAL_REGISTER,\n  AuthAPI.localRegister\n); // { email, username, password }\nexport const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin); // { email, password }\n\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\n\nexport const setError = createAction(SET_ERROR); // { form, message }\n\nconst initialState = Map({\n  register: Map({\n    form: Map({\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      passwordConfirm: \"\",\n    }),\n    exists: Map({\n      email: false,\n      password: false,\n    }),\n    error: null,\n  }),\n  login: Map({\n    form: Map({\n      username: \"\",\n      password: \"\",\n    }),\n    error: null,\n  }),\n  result: Map({}),\n});\n\n//reducer\nexport default handleActions(\n  {\n    [CHANGE_INPUT]: (state, action) => {\n      const { form, name, value } = action.payload;\n      return state.setIn([form, \"form\", name], value);\n    },\n\n    [INITIALIZE_FORM]: (state, action) => {\n      const initialForm = initialState.get(action.payload);\n      return state.set(action.payload, initialForm);\n    },\n    ...pender({\n      type: CHECK_EMAIL_EXISTS,\n      onSuccess: (state, action) =>\n        state.setIn(\n          [\"register\", \"exists\", \"email\"],\n          action.payload.data.exists\n        ),\n    }),\n    ...pender({\n      type: CHECK_USERNAME_EXISTS,\n      onSuccess: (state, action) =>\n        state.setIn(\n          [\"register\", \"exists\", \"username\"],\n          action.payload.data.exists\n        ),\n    }),\n    ...pender({\n      type: LOCAL_LOGIN,\n      onSuccess: (state, action) =>\n        state.set(\"result\", Map(action.payload.data)),\n    }),\n    ...pender({\n      type: LOCAL_REGISTER,\n      onSuccess: (state, action) =>\n        state.set(\"result\", Map(action.payload.data)),\n    }),\n    [SET_ERROR]: (state, action) => {\n      const { form, message } = action.payload;\n      return state.setIn([form, \"error\"], message);\n    },\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}