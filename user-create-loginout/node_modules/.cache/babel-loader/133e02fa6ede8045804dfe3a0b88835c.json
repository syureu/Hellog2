{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\2\\uD559\\uAE30\\\\2\\uD559\\uAE30\\uC800\\uC7A5\\uC18C\\\\s03p13d203(sub3)\\\\user-create-loginout\\\\src\\\\containers\\\\Auth\\\\Register.js\";\nimport React, { Component } from \"react\";\nimport { AuthContent, InputWithLabel, AuthButton, RightAlignedLink, AuthError } from \"components/Auth\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as authActions from \"redux/modules/auth\";\nimport { isEmail, isLength, isAlphanumeric } from \"validator\";\nimport debounce from \"lodash/debounce\";\nimport * as userActions from \"redux/modules/user\";\nimport storage from \"lib/storage\";\n\nclass Register extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.setError = message => {\n      const {\n        AuthActions\n      } = this.props;\n      AuthActions.setError({\n        form: \"register\",\n        message\n      });\n    };\n\n    this.validate = {\n      email: value => {\n        if (!isEmail(value)) {\n          this.setError(\"잘못된 이메일 형식 입니다.\");\n          return false;\n        }\n\n        return true;\n      },\n      username: value => {\n        if (!isAlphanumeric(value) || !isLength(value, {\n          min: 4,\n          max: 15\n        })) {\n          this.setError(\"아이디는 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.\");\n          return false;\n        }\n\n        return true;\n      },\n      password: value => {\n        if (!isLength(value, {\n          min: 6\n        })) {\n          this.setError(\"비밀번호를 6자 이상 입력하세요.\");\n          return false;\n        }\n\n        this.setError(null); // 이메일과 아이디는 에러 null 처리를 중복확인 부분에서 하게 됩니다\n\n        return true;\n      },\n      passwordConfirm: value => {\n        if (this.props.form.get(\"password\") !== value) {\n          this.setError(\"비밀번호확인이 일치하지 않습니다.\");\n          return false;\n        }\n\n        this.setError(null);\n        return true;\n      }\n    };\n    this.checkEmailExists = debounce(async email => {\n      const {\n        AuthActions\n      } = this.props;\n\n      try {\n        await AuthActions.checkEmailExists(email);\n\n        if (this.props.exists.get(\"email\")) {\n          this.setError(\"이미 존재하는 이메일입니다.\");\n        } else {\n          this.setError(null);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }, 300);\n    this.checkUsernameExists = debounce(async username => {\n      const {\n        AuthActions\n      } = this.props;\n\n      try {\n        await AuthActions.checkUsernameExists(username);\n\n        if (this.props.exists.get(\"username\")) {\n          this.setError(\"이미 존재하는 아이디입니다.\");\n        } else {\n          this.setError(null);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }, 300);\n\n    this.handleChange = e => {\n      const {\n        AuthActions\n      } = this.props;\n      const {\n        name,\n        value\n      } = e.target;\n      AuthActions.changeInput({\n        name,\n        value,\n        form: \"register\"\n      }); // 검증작업 진행\n\n      const validation = this.validate[name](value);\n      if (name.indexOf(\"password\") > -1 || !validation) return; // 비밀번호 검증이거나, 검증 실패하면 여기서 마침\n      // TODO: 이메일, 아이디 중복 확인\n\n      const check = name === \"email\" ? this.checkEmailExists : this.checkUsernameExists; // name 에 따라 이메일체크할지 아이디 체크 할지 결정\n\n      check(value);\n    };\n\n    this.handleLocalRegister = async () => {\n      const {\n        form,\n        AuthActions,\n        UserActions,\n        error,\n        history\n      } = this.props;\n      const {\n        email,\n        username,\n        password,\n        passwordConfirm\n      } = form.toJS();\n      const {\n        validate\n      } = this;\n      if (error) return; // 현재 에러가 있는 상태라면 진행하지 않음\n\n      if (!validate[\"email\"](email) || !validate[\"username\"](username) || !validate[\"password\"](password) || !validate[\"passwordConfirm\"](passwordConfirm)) {\n        // 하나라도 실패하면 진행하지 않음\n        return;\n      }\n\n      try {\n        await AuthActions.localRegister({\n          email,\n          username,\n          password\n        });\n        const loggedInfo = this.props.result.toJS();\n        storage.set(\"loggedInfo\", loggedInfo);\n        UserActions.setLoggedInfo(loggedInfo);\n        UserActions.setValidated(true);\n        history.push(\"/\"); // 회원가입 성공시 홈페이지로 이동\n      } catch (e) {\n        // 에러 처리하기\n        if (e.response.status === 409) {\n          const {\n            key\n          } = e.response.data;\n          const message = key === \"email\" ? \"이미 존재하는 이메일입니다.\" : \"이미 존재하는 아이디입니다.\";\n          return this.setError(message);\n        }\n\n        this.setError(\"알 수 없는 에러가 발생했습니다.\");\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    const {\n      AuthActions\n    } = this.props;\n    AuthActions.initializeForm(\"register\");\n  }\n\n  render() {\n    const {\n      error\n    } = this.props;\n    const {\n      email,\n      username,\n      password,\n      passwordConfirm\n    } = this.props.form.toJS();\n    const {\n      handleChange,\n      handleLocalRegister\n    } = this;\n    return /*#__PURE__*/React.createElement(AuthContent, {\n      title: \"\\uD68C\\uC6D0\\uAC00\\uC785\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uC774\\uBA54\\uC77C\",\n      name: \"email\",\n      placeholder: \"\\uC774\\uBA54\\uC77C\",\n      value: email,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uC544\\uC774\\uB514\",\n      name: \"username\",\n      placeholder: \"\\uC544\\uC774\\uB514\",\n      value: username,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n      name: \"password\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n      type: \"password\",\n      value: password,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(InputWithLabel, {\n      label: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n      name: \"passwordConfirm\",\n      placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n      type: \"password\",\n      value: passwordConfirm,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }), error && /*#__PURE__*/React.createElement(AuthError, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 19\n      }\n    }, error), /*#__PURE__*/React.createElement(AuthButton, {\n      onClick: handleLocalRegister,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }, \"\\uD68C\\uC6D0\\uAC00\\uC785\"), /*#__PURE__*/React.createElement(RightAlignedLink, {\n      to: \"/auth/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, \"\\uB85C\\uADF8\\uC778\"));\n  }\n\n}\n\nexport default connect(state => ({\n  form: state.auth.getIn([\"register\", \"form\"]),\n  error: state.auth.getIn([\"register\", \"error\"]),\n  exists: state.auth.getIn([\"register\", \"exists\"]),\n  result: state.auth.get(\"result\")\n}), dispatch => ({\n  AuthActions: bindActionCreators(authActions, dispatch),\n  UserActions: bindActionCreators(userActions, dispatch)\n}))(Register);","map":{"version":3,"sources":["C:/Users/multicampus/Desktop/2학기/2학기저장소/s03p13d203(sub3)/user-create-loginout/src/containers/Auth/Register.js"],"names":["React","Component","AuthContent","InputWithLabel","AuthButton","RightAlignedLink","AuthError","connect","bindActionCreators","authActions","isEmail","isLength","isAlphanumeric","debounce","userActions","storage","Register","setError","message","AuthActions","props","form","validate","email","value","username","min","max","password","passwordConfirm","get","checkEmailExists","exists","e","console","log","checkUsernameExists","handleChange","name","target","changeInput","validation","indexOf","check","handleLocalRegister","UserActions","error","history","toJS","localRegister","loggedInfo","result","set","setLoggedInfo","setValidated","push","response","status","key","data","componentWillUnmount","initializeForm","render","state","auth","getIn","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  AuthContent,\n  InputWithLabel,\n  AuthButton,\n  RightAlignedLink,\n  AuthError,\n} from \"components/Auth\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as authActions from \"redux/modules/auth\";\nimport { isEmail, isLength, isAlphanumeric } from \"validator\";\n\nimport debounce from \"lodash/debounce\";\n\nimport * as userActions from \"redux/modules/user\";\nimport storage from \"lib/storage\";\n\nclass Register extends Component {\n  setError = (message) => {\n    const { AuthActions } = this.props;\n    AuthActions.setError({\n      form: \"register\",\n      message,\n    });\n  };\n\n  validate = {\n    email: (value) => {\n      if (!isEmail(value)) {\n        this.setError(\"잘못된 이메일 형식 입니다.\");\n        return false;\n      }\n      return true;\n    },\n    username: (value) => {\n      if (!isAlphanumeric(value) || !isLength(value, { min: 4, max: 15 })) {\n        this.setError(\n          \"아이디는 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.\"\n        );\n        return false;\n      }\n      return true;\n    },\n    password: (value) => {\n      if (!isLength(value, { min: 6 })) {\n        this.setError(\"비밀번호를 6자 이상 입력하세요.\");\n        return false;\n      }\n      this.setError(null); // 이메일과 아이디는 에러 null 처리를 중복확인 부분에서 하게 됩니다\n      return true;\n    },\n    passwordConfirm: (value) => {\n      if (this.props.form.get(\"password\") !== value) {\n        this.setError(\"비밀번호확인이 일치하지 않습니다.\");\n        return false;\n      }\n      this.setError(null);\n      return true;\n    },\n  };\n\n  checkEmailExists = debounce(async (email) => {\n    const { AuthActions } = this.props;\n    try {\n      await AuthActions.checkEmailExists(email);\n      if (this.props.exists.get(\"email\")) {\n        this.setError(\"이미 존재하는 이메일입니다.\");\n      } else {\n        this.setError(null);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, 300);\n\n  checkUsernameExists = debounce(async (username) => {\n    const { AuthActions } = this.props;\n    try {\n      await AuthActions.checkUsernameExists(username);\n      if (this.props.exists.get(\"username\")) {\n        this.setError(\"이미 존재하는 아이디입니다.\");\n      } else {\n        this.setError(null);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, 300);\n  // debounce 할 함수 감싸주고, 두번째 파라미터로 쉬어야 할 시간 넣어줌\n  // 시간 단위는 ms\n\n  handleChange = (e) => {\n    const { AuthActions } = this.props;\n    const { name, value } = e.target;\n\n    AuthActions.changeInput({\n      name,\n      value,\n      form: \"register\",\n    });\n    // 검증작업 진행\n    const validation = this.validate[name](value);\n    if (name.indexOf(\"password\") > -1 || !validation) return; // 비밀번호 검증이거나, 검증 실패하면 여기서 마침\n\n    // TODO: 이메일, 아이디 중복 확인\n    const check =\n      name === \"email\" ? this.checkEmailExists : this.checkUsernameExists; // name 에 따라 이메일체크할지 아이디 체크 할지 결정\n    check(value);\n  };\n  componentWillUnmount() {\n    const { AuthActions } = this.props;\n    AuthActions.initializeForm(\"register\");\n  }\n  handleLocalRegister = async () => {\n    const { form, AuthActions, UserActions, error, history } = this.props;\n    const { email, username, password, passwordConfirm } = form.toJS();\n\n    const { validate } = this;\n\n    if (error) return; // 현재 에러가 있는 상태라면 진행하지 않음\n    if (\n      !validate[\"email\"](email) ||\n      !validate[\"username\"](username) ||\n      !validate[\"password\"](password) ||\n      !validate[\"passwordConfirm\"](passwordConfirm)\n    ) {\n      // 하나라도 실패하면 진행하지 않음\n      return;\n    }\n\n    try {\n      await AuthActions.localRegister({\n        email,\n        username,\n        password,\n      });\n      const loggedInfo = this.props.result.toJS();\n\n      storage.set(\"loggedInfo\", loggedInfo);\n      UserActions.setLoggedInfo(loggedInfo);\n      UserActions.setValidated(true);\n      history.push(\"/\"); // 회원가입 성공시 홈페이지로 이동\n    } catch (e) {\n      // 에러 처리하기\n      if (e.response.status === 409) {\n        const { key } = e.response.data;\n        const message =\n          key === \"email\"\n            ? \"이미 존재하는 이메일입니다.\"\n            : \"이미 존재하는 아이디입니다.\";\n        return this.setError(message);\n      }\n      this.setError(\"알 수 없는 에러가 발생했습니다.\");\n    }\n  };\n\n  render() {\n    const { error } = this.props;\n    const {\n      email,\n      username,\n      password,\n      passwordConfirm,\n    } = this.props.form.toJS();\n    const { handleChange, handleLocalRegister } = this;\n\n    return (\n      <AuthContent title=\"회원가입\">\n        <InputWithLabel\n          label=\"이메일\"\n          name=\"email\"\n          placeholder=\"이메일\"\n          value={email}\n          onChange={handleChange}\n        />\n        <InputWithLabel\n          label=\"아이디\"\n          name=\"username\"\n          placeholder=\"아이디\"\n          value={username}\n          onChange={handleChange}\n        />\n        <InputWithLabel\n          label=\"비밀번호\"\n          name=\"password\"\n          placeholder=\"비밀번호\"\n          type=\"password\"\n          value={password}\n          onChange={handleChange}\n        />\n        <InputWithLabel\n          label=\"비밀번호 확인\"\n          name=\"passwordConfirm\"\n          placeholder=\"비밀번호 확인\"\n          type=\"password\"\n          value={passwordConfirm}\n          onChange={handleChange}\n        />\n        {error && <AuthError>{error}</AuthError>}\n        <AuthButton onClick={handleLocalRegister}>회원가입</AuthButton>\n        <RightAlignedLink to=\"/auth/login\">로그인</RightAlignedLink>\n      </AuthContent>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    form: state.auth.getIn([\"register\", \"form\"]),\n    error: state.auth.getIn([\"register\", \"error\"]),\n    exists: state.auth.getIn([\"register\", \"exists\"]),\n    result: state.auth.get(\"result\"),\n  }),\n  (dispatch) => ({\n    AuthActions: bindActionCreators(authActions, dispatch),\n    UserActions: bindActionCreators(userActions, dispatch),\n  })\n)(Register);\n"]},"metadata":{},"sourceType":"module"}