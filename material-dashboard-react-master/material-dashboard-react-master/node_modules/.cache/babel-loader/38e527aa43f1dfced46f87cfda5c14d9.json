{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\2\\uD559\\uAE30\\\\2\\uD559\\uAE30\\uC800\\uC7A5\\uC18C\\\\s03p13d203(sub3)\\\\material-dashboard-react-master\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\2\\uD559\\uAE30\\\\2\\uD559\\uAE30\\uC800\\uC7A5\\uC18C\\\\s03p13d203(sub3)\\\\material-dashboard-react-master\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\2\\uD559\\uAE30\\\\2\\uD559\\uAE30\\uC800\\uC7A5\\uC18C\\\\s03p13d203(sub3)\\\\material-dashboard-react-master\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\2\\uD559\\uAE30\\\\2\\uD559\\uAE30\\uC800\\uC7A5\\uC18C\\\\s03p13d203(sub3)\\\\material-dashboard-react-master\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\2\\uD559\\uAE30\\\\2\\uD559\\uAE30\\uC800\\uC7A5\\uC18C\\\\s03p13d203(sub3)\\\\material-dashboard-react-master\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\2\\uD559\\uAE30\\\\2\\uD559\\uAE30\\uC800\\uC7A5\\uC18C\\\\s03p13d203(sub3)\\\\material-dashboard-react-master\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\2\\uD559\\uAE30\\\\2\\uD559\\uAE30\\uC800\\uC7A5\\uC18C\\\\s03p13d203(sub3)\\\\material-dashboard-react-master\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\2\\uD559\\uAE30\\\\2\\uD559\\uAE30\\uC800\\uC7A5\\uC18C\\\\s03p13d203(sub3)\\\\material-dashboard-react-master\\\\material-dashboard-react-master\\\\src\\\\views\\\\Dietboard\\\\Dietboard.js\";\nimport React, { Component } from \"react\";\nimport { Main } from \"./index\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\n\nvar realFinal = /*#__PURE__*/function (_Component) {\n  _inherits(realFinal, _Component);\n\n  var _super = _createSuper(realFinal);\n\n  function realFinal(props) {\n    var _this$state2;\n\n    var _this;\n\n    _classCallCheck(this, realFinal);\n\n    _this = _super.call(this, props);\n\n    _this._getAllLike = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(board_id) {\n        var getData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios(\"/get/board_data\", {\n                  method: \"POST\",\n                  headers: new Headers(),\n                  data: {\n                    id: board_id\n                  }\n                });\n\n              case 2:\n                getData = _context.sent;\n\n                _this.setState({\n                  like_num: getData.data[0].likes\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this._getData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(board_id) {\n        var getData, date;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios(\"/get/board_data\", {\n                  method: \"POST\",\n                  headers: new Headers(),\n                  data: {\n                    id: board_id\n                  }\n                });\n\n              case 2:\n                getData = _context2.sent;\n                // 날짜 구하기\n                date = getData.data[0].date.slice(0, 10) + \" \" + getData.data[0].date.slice(11, 16);\n                return _context2.abrupt(\"return\", _this.setState({\n                  data: getData,\n                  date: date,\n                  like_num: getData.data[0].likes\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this._setPage = function () {\n      if (sessionStorage.page) {\n        this.setState({\n          list_page: Number(sessionStorage.page)\n        });\n        return Number(sessionStorage.page);\n      }\n\n      this.setState({\n        list_page: 1\n      });\n      return 1;\n    };\n\n    _this._setReplyPage = function () {\n      if (sessionStorage.reply) {\n        // 댓글\n        var reply = JSON.parse(sessionStorage.reply);\n        this.setState({\n          reply_page: Number(reply.reply_page)\n        });\n        return this._getAllPage(reply.board_id);\n      }\n    };\n\n    _this._changePage = function (el, board_id) {\n      if (board_id === undefined) {\n        // 게시글 형태에서\n        _this.setState({\n          list_page: el\n        });\n\n        sessionStorage.setItem(\"page\", el);\n        return _this._getListData();\n      } else {\n        // 댓글 형태에서\n        _this.setState({\n          reply_page: el\n        });\n\n        var reply_session = {\n          reply_page: el,\n          board_id: board_id\n        };\n        sessionStorage.setItem(\"reply\", JSON.stringify(reply_session));\n        return _this._getReplyData(board_id);\n      }\n    };\n\n    _this._getListData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var list_limit, list_pages, categorys, search, total_cnt, total_list, page_arr, i;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              list_limit = this.state.list_limit;\n              list_pages = this._setPage();\n              categorys = \"\";\n\n              if (sessionStorage.getItem(\"category\")) {\n                categorys = sessionStorage.getItem(\"category\");\n              }\n\n              search = \"\";\n\n              if (queryString.parse(this.props.location.search)) {\n                search = queryString.parse(this.props.location.search).search;\n              } // Board 테이블 데이터 전체 수\n\n\n              _context3.next = 8;\n              return axios(\"/get/board_cnt\", {\n                method: \"POST\",\n                headers: new Headers(),\n                data: {\n                  search: search,\n                  category: categorys\n                }\n              });\n\n            case 8:\n              total_cnt = _context3.sent;\n              _context3.next = 11;\n              return axios(\"/get/board\", {\n                method: \"POST\",\n                headers: new Headers(),\n                data: {\n                  limit: list_limit,\n                  page: list_pages,\n                  search: search,\n                  category: categorys\n                }\n              });\n\n            case 11:\n              total_list = _context3.sent;\n              // 전체 페이지 수 구하기\n              page_arr = [];\n\n              for (i = 1; i <= Math.ceil(total_cnt.data.cnt / list_limit); i++) {\n                page_arr.push(i);\n              }\n\n              this.setState({\n                list_data: [{\n                  board_id: 1,\n                  title: \"테스트1\",\n                  contents: \"테스트중\",\n                  data: new Date(),\n                  view_cnt: 1,\n                  cat_id: 1,\n                  likes: 1\n                }],\n                list_all_page: page_arr,\n                list_search: search\n              });\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    _this._login = function (data) {\n      sessionStorage.setItem(\"login\", JSON.stringify(data.suc));\n      sessionStorage.setItem(\"IP\", JSON.stringify(data.ip));\n\n      _this.setState({\n        login: JSON.parse(sessionStorage.login).id,\n        admin: JSON.stringify(data.suc).admin,\n        user_ip: JSON.parse(sessionStorage.IP),\n        user_id: JSON.parse(sessionStorage.login).user_id\n      });\n\n      return window.location.reload();\n    };\n\n    _this._logout = function () {\n      _this.setState({\n        login: false,\n        admin: false,\n        user_ip: \"\"\n      });\n\n      sessionStorage.removeItem(\"login\");\n      sessionStorage.removeItem(\"IP\");\n    };\n\n    _this._toggleModal = function (_boolean) {\n      _this.setState({\n        login_modal: _boolean\n      });\n    };\n\n    _this._changeCatgory = function (target) {\n      sessionStorage.setItem(\"category\", target);\n      return window.location.href = \"/realFinal\";\n    };\n\n    _this._getPreAndNextData = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(board_id) {\n        var category, res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                category = sessionStorage.getItem(\"category\");\n                _context4.next = 3;\n                return axios(\"/get/pre_and_next\", {\n                  method: \"POST\",\n                  headers: new Headers(),\n                  data: {\n                    board_id: board_id,\n                    category: category\n                  }\n                });\n\n              case 3:\n                res = _context4.sent;\n\n                _this.setState({\n                  pre_view: res.data.pre,\n                  next_view: res.data.next\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this._getAllCategoryData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var getData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              getData = [{\n                id: 1,\n                name: \"아침\"\n              }, {\n                id: 2,\n                name: \"점심\"\n              }, {\n                id: 3,\n                name: \"저녁\"\n              }];\n              this.setState({\n                category_data: getData\n              });\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    _this._selectCategoryData = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(board_id) {\n        var category, getData;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                category = document.getElementsByName(\"select_category\")[0].value;\n\n                if (!board_id) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _context6.next = 4;\n                return axios(\"/get/board_data\", {\n                  method: \"POST\",\n                  headers: new Headers(),\n                  data: {\n                    id: board_id\n                  }\n                });\n\n              case 4:\n                getData = _context6.sent;\n                return _context6.abrupt(\"return\", _this.setState({\n                  select_category: getData.data[0].cat_id\n                }));\n\n              case 6:\n                _this.setState({\n                  select_category: category\n                });\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x4) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    _this._getLikeExist = function (boo) {\n      _this.setState({\n        like_exist: boo\n      });\n    };\n\n    _this._getReplyData = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(board_id) {\n        var reply_page, reply_limit, obj, data, page_data;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                reply_page = 1;\n\n                if (sessionStorage.getItem(\"reply\")) {\n                  reply_page = JSON.parse(sessionStorage.getItem(\"reply\")).reply_page;\n                } else {\n                  reply_page = _this.state.reply_page;\n                } // 한 페이지에 불러올 댓글의 갯수 설정\n\n\n                reply_limit = _this.state.reply_limit;\n                obj = {\n                  board_id: board_id,\n                  reply_page: Number(reply_page),\n                  reply_limit: reply_limit\n                }; // 데이터와 총 갯수 구하기\n\n                _context7.next = 6;\n                return axios(\"/get/reply_data\", {\n                  method: \"POST\",\n                  headers: new Headers(),\n                  data: obj\n                });\n\n              case 6:\n                data = _context7.sent;\n                // 페이징 정보 구해오기\n                page_data = _this._getAllPage(data.data.count);\n                return _context7.abrupt(\"return\", _this.setState({\n                  reply_data: data.data.rows,\n                  reply_num: data.data.count,\n                  reply_all_page: page_data.page_arr\n                }));\n\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    _this._getAllPage = function (cnt) {\n      var result = new Object(); // 전체 페이지 수 구하기\n\n      var page_arr = [{\n        board_id: 1,\n        title: \"테스트1\",\n        contents: \"테스트중\",\n        data: new Date(),\n        view_cnt: 1,\n        cat_id: 1,\n        likes: 1\n      }];\n      var _this$state = this.state,\n          reply_limit = _this$state.reply_limit,\n          reply_block_limit = _this$state.reply_block_limit; // 현재 페이지 구하기\n\n      var reply_page = 1;\n\n      if (sessionStorage.getItem(\"reply\")) {\n        reply_page = JSON.parse(sessionStorage.getItem(\"reply\")).reply_page;\n      } else {\n        reply_page = this.state.reply_page;\n      } // 블록 최대 범위 (소수점 포함)\n\n\n      var max_block = Math.ceil(cnt / reply_limit) / reply_block_limit; // 현재 페이지 위치를 블록 단위로 변환\n\n      var block_point = Math.ceil(reply_page / reply_block_limit);\n      this.setState({\n        reply_block: block_point,\n        reply_page: reply_page\n      }); // 다음 블록이 있는지 판단\n\n      if (block_point < max_block) {\n        this.setState({\n          reply_next_block: true\n        });\n      } else {\n        this.setState({\n          reply_next_block: false\n        });\n      } // 이전 블록이 있는지 판단\n\n\n      if (block_point > 1) {\n        this.setState({\n          reply_pre_block: true\n        });\n      } else {\n        this.setState({\n          reply_pre_block: false\n        });\n      }\n\n      var start = block_point;\n\n      if (start !== 1) {\n        start = (start - 1) * reply_block_limit + 1;\n      }\n\n      var end = Math.ceil(cnt / reply_limit);\n\n      if (end > reply_block_limit) {\n        end = start + reply_block_limit - 1;\n\n        if (end > max_block * 10) {\n          end = max_block * 10;\n        }\n      }\n\n      for (start; start <= end; start++) {\n        page_arr.push(start);\n      }\n\n      result[\"page_arr\"] = page_arr;\n      return result;\n    };\n\n    _this._changeBlock = function (reply_page, board_id) {\n      var reply_session = {\n        reply_page: reply_page,\n        board_id: board_id\n      };\n      sessionStorage.setItem(\"reply\", JSON.stringify(reply_session));\n      return _this._getReplyData(board_id);\n    };\n\n    _this.state = (_this$state2 = {\n      login: false,\n      admin: false,\n      user_ip: \"\",\n      signup: false,\n      login_modal: false,\n      list_data: [],\n      list_page: 1,\n      list_limit: 10,\n      list_all_page: [],\n      list_search: \"\",\n      category: \"\",\n      user_id: \"\",\n      data: \"\",\n      date: \"\",\n      like_num: 0,\n      like_exist: null\n    }, _defineProperty(_this$state2, \"like_num\", \"\"), _defineProperty(_this$state2, \"pre_view\", \"\"), _defineProperty(_this$state2, \"next_view\", \"\"), _defineProperty(_this$state2, \"category_data\", []), _defineProperty(_this$state2, \"select_category\", \"\"), _defineProperty(_this$state2, \"reply_data\", []), _defineProperty(_this$state2, \"reply_num\", null), _defineProperty(_this$state2, \"reply_all_page\", []), _defineProperty(_this$state2, \"reply_page\", 1), _defineProperty(_this$state2, \"reply_limit\", 2), _defineProperty(_this$state2, \"reply_block\", 1), _defineProperty(_this$state2, \"reply_pre_block\", false), _defineProperty(_this$state2, \"reply_next_block\", false), _defineProperty(_this$state2, \"reply_block_limit\", 10), _this$state2);\n    return _this;\n  }\n\n  _createClass(realFinal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._getListData();\n\n      this._getAllCategoryData();\n\n      if (sessionStorage.login && sessionStorage.IP) {\n        this.setState({\n          login: JSON.parse(sessionStorage.login).id,\n          admin: JSON.parse(sessionStorage.login).admin,\n          user_ip: JSON.parse(sessionStorage.IP),\n          user_id: JSON.parse(sessionStorage.login).user_id\n        });\n      }\n\n      if (sessionStorage.reply) {\n        this._setReplyPage();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          login = _this$state3.login,\n          admin = _this$state3.admin,\n          user_ip = _this$state3.user_ip,\n          login_modal = _this$state3.login_modal,\n          list_data = _this$state3.list_data,\n          list_all_page = _this$state3.list_all_page,\n          list_search = _this$state3.list_search,\n          list_page = _this$state3.list_page,\n          user_id = _this$state3.user_id,\n          data = _this$state3.data,\n          date = _this$state3.date,\n          like_num = _this$state3.like_num,\n          like_exist = _this$state3.like_exist,\n          pre_view = _this$state3.pre_view,\n          next_view = _this$state3.next_view,\n          category_data = _this$state3.category_data,\n          select_category = _this$state3.select_category,\n          reply_data = _this$state3.reply_data,\n          reply_num = _this$state3.reply_num,\n          reply_all_page = _this$state3.reply_all_page,\n          reply_page = _this$state3.reply_page,\n          replt_limit = _this$state3.replt_limit,\n          reply_pre_block = _this$state3.reply_pre_block,\n          reply_next_block = _this$state3.reply_next_block,\n          reply_block = _this$state3.reply_block,\n          reply_block_limit = _this$state3.reply_block_limit;\n      var _login = this._login,\n          _logout = this._logout,\n          _toggleModal = this._toggleModal,\n          _getSearch = this._getSearch,\n          _changePage = this._changePage,\n          _changeCatgory = this._changeCatgory,\n          _getData = this._getData,\n          _getAllLike = this._getAllLike,\n          _getPreAndNextData = this._getPreAndNextData,\n          _selectCategoryData = this._selectCategoryData,\n          _getLikeExist = this._getLikeExist,\n          _getReplyData = this._getReplyData;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Main, {\n        admin: admin,\n        user_ip: user_ip,\n        login: login,\n        login_modal: login_modal,\n        _toggleModal: _toggleModal,\n        _getSearch: _getSearch,\n        list_data: list_data,\n        list_all_page: list_all_page,\n        list_search: list_search,\n        list_page: list_page,\n        _changePage: _changePage,\n        _changeCatgory: _changeCatgory,\n        user_id: user_id,\n        data: data,\n        date: date,\n        like_num: like_num,\n        _getData: _getData,\n        _getAllLike: _getAllLike,\n        pre_view: pre_view,\n        next_view: next_view,\n        _getPreAndNextData: _getPreAndNextData,\n        category_data: category_data,\n        select_category: select_category,\n        _selectCategoryData: _selectCategoryData,\n        _getLikeExist: _getLikeExist,\n        like_exist: like_exist,\n        reply_data: reply_data,\n        reply_num: reply_num,\n        _getReplyData: _getReplyData,\n        reply_all_page: reply_all_page,\n        reply_page: reply_page,\n        replt_limit: replt_limit,\n        reply_pre_block: reply_pre_block,\n        reply_next_block: reply_next_block,\n        reply_block: reply_block,\n        reply_block_limit: reply_block_limit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return realFinal;\n}(Component);\n\nexport default realFinal;","map":{"version":3,"sources":["C:/Users/multicampus/Desktop/2학기/2학기저장소/s03p13d203(sub3)/material-dashboard-react-master/material-dashboard-react-master/src/views/Dietboard/Dietboard.js"],"names":["React","Component","Main","axios","queryString","realFinal","props","_getAllLike","board_id","method","headers","Headers","data","id","getData","setState","like_num","likes","_getData","date","slice","_setPage","sessionStorage","page","list_page","Number","_setReplyPage","reply","JSON","parse","reply_page","_getAllPage","_changePage","el","undefined","setItem","_getListData","reply_session","stringify","_getReplyData","list_limit","state","list_pages","categorys","getItem","search","location","category","total_cnt","limit","total_list","page_arr","i","Math","ceil","cnt","push","list_data","title","contents","Date","view_cnt","cat_id","list_all_page","list_search","_login","suc","ip","login","admin","user_ip","IP","user_id","window","reload","_logout","removeItem","_toggleModal","boolean","login_modal","_changeCatgory","target","href","_getPreAndNextData","res","pre_view","pre","next_view","next","_getAllCategoryData","name","category_data","_selectCategoryData","document","getElementsByName","value","select_category","_getLikeExist","boo","like_exist","reply_limit","obj","page_data","count","reply_data","rows","reply_num","reply_all_page","result","Object","reply_block_limit","max_block","block_point","reply_block","reply_next_block","reply_pre_block","start","end","_changeBlock","signup","replt_limit","_getSearch"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,IAAT,QAAqB,SAArB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;;IAEMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAsDnBC,WAtDmB;AAAA,0EAsDL,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACUL,KAAK,CAAC,iBAAD,EAAoB;AAC7CM,kBAAAA,MAAM,EAAE,MADqC;AAE7CC,kBAAAA,OAAO,EAAE,IAAIC,OAAJ,EAFoC;AAG7CC,kBAAAA,IAAI,EAAE;AAAEC,oBAAAA,EAAE,EAAEL;AAAN;AAHuC,iBAApB,CADf;;AAAA;AACNM,gBAAAA,OADM;;AAOZ,sBAAKC,QAAL,CAAc;AAAEC,kBAAAA,QAAQ,EAAEF,OAAO,CAACF,IAAR,CAAa,CAAb,EAAgBK;AAA5B,iBAAd;;AAPY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAtDK;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAgEnBC,QAhEmB;AAAA,2EAgER,kBAAOV,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACaL,KAAK,CAAC,iBAAD,EAAoB;AAC7CM,kBAAAA,MAAM,EAAE,MADqC;AAE7CC,kBAAAA,OAAO,EAAE,IAAIC,OAAJ,EAFoC;AAG7CC,kBAAAA,IAAI,EAAE;AAAEC,oBAAAA,EAAE,EAAEL;AAAN;AAHuC,iBAApB,CADlB;;AAAA;AACHM,gBAAAA,OADG;AAOT;AACMK,gBAAAA,IARG,GASPL,OAAO,CAACF,IAAR,CAAa,CAAb,EAAgBO,IAAhB,CAAqBC,KAArB,CAA2B,CAA3B,EAA8B,EAA9B,IACA,GADA,GAEAN,OAAO,CAACF,IAAR,CAAa,CAAb,EAAgBO,IAAhB,CAAqBC,KAArB,CAA2B,EAA3B,EAA+B,EAA/B,CAXO;AAAA,kDAaF,MAAKL,QAAL,CAAc;AACnBH,kBAAAA,IAAI,EAAEE,OADa;AAEnBK,kBAAAA,IAAI,EAAEA,IAFa;AAGnBH,kBAAAA,QAAQ,EAAEF,OAAO,CAACF,IAAR,CAAa,CAAb,EAAgBK;AAHP,iBAAd,CAbE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAhEQ;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAoFnBI,QApFmB,GAoFR,YAAY;AACrB,UAAIC,cAAc,CAACC,IAAnB,EAAyB;AACvB,aAAKR,QAAL,CAAc;AAAES,UAAAA,SAAS,EAAEC,MAAM,CAACH,cAAc,CAACC,IAAhB;AAAnB,SAAd;AACA,eAAOE,MAAM,CAACH,cAAc,CAACC,IAAhB,CAAb;AACD;;AAED,WAAKR,QAAL,CAAc;AAAES,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,aAAO,CAAP;AACD,KA5FkB;;AAAA,UA8FnBE,aA9FmB,GA8FH,YAAY;AAC1B,UAAIJ,cAAc,CAACK,KAAnB,EAA0B;AACxB;AACA,YAAMA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWP,cAAc,CAACK,KAA1B,CAAd;AAEA,aAAKZ,QAAL,CAAc;AACZe,UAAAA,UAAU,EAAEL,MAAM,CAACE,KAAK,CAACG,UAAP;AADN,SAAd;AAIA,eAAO,KAAKC,WAAL,CAAiBJ,KAAK,CAACnB,QAAvB,CAAP;AACD;AACF,KAzGkB;;AAAA,UA2GnBwB,WA3GmB,GA2GL,UAACC,EAAD,EAAKzB,QAAL,EAAkB;AAC9B,UAAIA,QAAQ,KAAK0B,SAAjB,EAA4B;AAC1B;AACA,cAAKnB,QAAL,CAAc;AAAES,UAAAA,SAAS,EAAES;AAAb,SAAd;;AACAX,QAAAA,cAAc,CAACa,OAAf,CAAuB,MAAvB,EAA+BF,EAA/B;AAEA,eAAO,MAAKG,YAAL,EAAP;AACD,OAND,MAMO;AACL;AACA,cAAKrB,QAAL,CAAc;AAAEe,UAAAA,UAAU,EAAEG;AAAd,SAAd;;AACA,YAAMI,aAAa,GAAG;AAAEP,UAAAA,UAAU,EAAEG,EAAd;AAAkBzB,UAAAA,QAAQ,EAAEA;AAA5B,SAAtB;AACAc,QAAAA,cAAc,CAACa,OAAf,CAAuB,OAAvB,EAAgCP,IAAI,CAACU,SAAL,CAAeD,aAAf,CAAhC;AAEA,eAAO,MAAKE,aAAL,CAAmB/B,QAAnB,CAAP;AACD;AACF,KA1HkB;;AAAA,UA4HnB4B,YA5HmB,yEA4HJ;AAAA;AAAA;AAAA;AAAA;AAAA;AACLI,cAAAA,UADK,GACU,KAAKC,KADf,CACLD,UADK;AAEPE,cAAAA,UAFO,GAEM,KAAKrB,QAAL,EAFN;AAITsB,cAAAA,SAJS,GAIG,EAJH;;AAKb,kBAAIrB,cAAc,CAACsB,OAAf,CAAuB,UAAvB,CAAJ,EAAwC;AACtCD,gBAAAA,SAAS,GAAGrB,cAAc,CAACsB,OAAf,CAAuB,UAAvB,CAAZ;AACD;;AAEGC,cAAAA,MATS,GASA,EATA;;AAUb,kBAAIzC,WAAW,CAACyB,KAAZ,CAAkB,KAAKvB,KAAL,CAAWwC,QAAX,CAAoBD,MAAtC,CAAJ,EAAmD;AACjDA,gBAAAA,MAAM,GAAGzC,WAAW,CAACyB,KAAZ,CAAkB,KAAKvB,KAAL,CAAWwC,QAAX,CAAoBD,MAAtC,EAA8CA,MAAvD;AACD,eAZY,CAcb;;;AAda;AAAA,qBAeW1C,KAAK,CAAC,gBAAD,EAAmB;AAC9CM,gBAAAA,MAAM,EAAE,MADsC;AAE9CC,gBAAAA,OAAO,EAAE,IAAIC,OAAJ,EAFqC;AAG9CC,gBAAAA,IAAI,EAAE;AAAEiC,kBAAAA,MAAM,EAAEA,MAAV;AAAkBE,kBAAAA,QAAQ,EAAEJ;AAA5B;AAHwC,eAAnB,CAfhB;;AAAA;AAePK,cAAAA,SAfO;AAAA;AAAA,qBAsBY7C,KAAK,CAAC,YAAD,EAAe;AAC3CM,gBAAAA,MAAM,EAAE,MADmC;AAE3CC,gBAAAA,OAAO,EAAE,IAAIC,OAAJ,EAFkC;AAG3CC,gBAAAA,IAAI,EAAE;AACJqC,kBAAAA,KAAK,EAAET,UADH;AAEJjB,kBAAAA,IAAI,EAAEmB,UAFF;AAGJG,kBAAAA,MAAM,EAAEA,MAHJ;AAIJE,kBAAAA,QAAQ,EAAEJ;AAJN;AAHqC,eAAf,CAtBjB;;AAAA;AAsBPO,cAAAA,UAtBO;AAiCb;AACIC,cAAAA,QAlCS,GAkCE,EAlCF;;AAoCb,mBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,IAAIC,IAAI,CAACC,IAAL,CAAUN,SAAS,CAACpC,IAAV,CAAe2C,GAAf,GAAqBf,UAA/B,CAArB,EAAiEY,CAAC,EAAlE,EAAsE;AACpED,gBAAAA,QAAQ,CAACK,IAAT,CAAcJ,CAAd;AACD;;AAED,mBAAKrC,QAAL,CAAc;AACZ0C,gBAAAA,SAAS,EAAE,CACT;AACEjD,kBAAAA,QAAQ,EAAE,CADZ;AAEEkD,kBAAAA,KAAK,EAAE,MAFT;AAGEC,kBAAAA,QAAQ,EAAE,MAHZ;AAIE/C,kBAAAA,IAAI,EAAE,IAAIgD,IAAJ,EAJR;AAKEC,kBAAAA,QAAQ,EAAE,CALZ;AAMEC,kBAAAA,MAAM,EAAE,CANV;AAOE7C,kBAAAA,KAAK,EAAE;AAPT,iBADS,CADC;AAYZ8C,gBAAAA,aAAa,EAAEZ,QAZH;AAaZa,gBAAAA,WAAW,EAAEnB;AAbD,eAAd;;AAxCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5HI;;AAAA,UAqLnBoB,MArLmB,GAqLV,UAACrD,IAAD,EAAU;AACjBU,MAAAA,cAAc,CAACa,OAAf,CAAuB,OAAvB,EAAgCP,IAAI,CAACU,SAAL,CAAe1B,IAAI,CAACsD,GAApB,CAAhC;AACA5C,MAAAA,cAAc,CAACa,OAAf,CAAuB,IAAvB,EAA6BP,IAAI,CAACU,SAAL,CAAe1B,IAAI,CAACuD,EAApB,CAA7B;;AAEA,YAAKpD,QAAL,CAAc;AACZqD,QAAAA,KAAK,EAAExC,IAAI,CAACC,KAAL,CAAWP,cAAc,CAAC8C,KAA1B,EAAiCvD,EAD5B;AAEZwD,QAAAA,KAAK,EAAEzC,IAAI,CAACU,SAAL,CAAe1B,IAAI,CAACsD,GAApB,EAAyBG,KAFpB;AAGZC,QAAAA,OAAO,EAAE1C,IAAI,CAACC,KAAL,CAAWP,cAAc,CAACiD,EAA1B,CAHG;AAIZC,QAAAA,OAAO,EAAE5C,IAAI,CAACC,KAAL,CAAWP,cAAc,CAAC8C,KAA1B,EAAiCI;AAJ9B,OAAd;;AAMA,aAAOC,MAAM,CAAC3B,QAAP,CAAgB4B,MAAhB,EAAP;AACD,KAhMkB;;AAAA,UAkMnBC,OAlMmB,GAkMT,YAAM;AACd,YAAK5D,QAAL,CAAc;AAAEqD,QAAAA,KAAK,EAAE,KAAT;AAAgBC,QAAAA,KAAK,EAAE,KAAvB;AAA8BC,QAAAA,OAAO,EAAE;AAAvC,OAAd;;AAEAhD,MAAAA,cAAc,CAACsD,UAAf,CAA0B,OAA1B;AACAtD,MAAAA,cAAc,CAACsD,UAAf,CAA0B,IAA1B;AACD,KAvMkB;;AAAA,UAyMnBC,YAzMmB,GAyMJ,UAACC,QAAD,EAAa;AAC1B,YAAK/D,QAAL,CAAc;AAAEgE,QAAAA,WAAW,EAAED;AAAf,OAAd;AACD,KA3MkB;;AAAA,UA8MnBE,cA9MmB,GA8MF,UAACC,MAAD,EAAY;AAC3B3D,MAAAA,cAAc,CAACa,OAAf,CAAuB,UAAvB,EAAmC8C,MAAnC;AACA,aAAQR,MAAM,CAAC3B,QAAP,CAAgBoC,IAAhB,GAAuB,YAA/B;AACD,KAjNkB;;AAAA,UAmNnBC,kBAnNmB;AAAA,2EAmNE,kBAAO3E,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACbuC,gBAAAA,QADa,GACFzB,cAAc,CAACsB,OAAf,CAAuB,UAAvB,CADE;AAAA;AAAA,uBAGDzC,KAAK,CAAC,mBAAD,EAAsB;AAC3CM,kBAAAA,MAAM,EAAE,MADmC;AAE3CC,kBAAAA,OAAO,EAAE,IAAIC,OAAJ,EAFkC;AAG3CC,kBAAAA,IAAI,EAAE;AAAEJ,oBAAAA,QAAQ,EAAEA,QAAZ;AAAsBuC,oBAAAA,QAAQ,EAAEA;AAAhC;AAHqC,iBAAtB,CAHJ;;AAAA;AAGbqC,gBAAAA,GAHa;;AASnB,sBAAKrE,QAAL,CAAc;AACZsE,kBAAAA,QAAQ,EAAED,GAAG,CAACxE,IAAJ,CAAS0E,GADP;AAEZC,kBAAAA,SAAS,EAAEH,GAAG,CAACxE,IAAJ,CAAS4E;AAFR,iBAAd;;AATmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAnNF;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAkOnBC,mBAlOmB,yEAkOG;AAAA;AAAA;AAAA;AAAA;AAAA;AACd3E,cAAAA,OADc,GACJ,CACd;AAAED,gBAAAA,EAAE,EAAE,CAAN;AAAS6E,gBAAAA,IAAI,EAAE;AAAf,eADc,EAEd;AAAE7E,gBAAAA,EAAE,EAAE,CAAN;AAAS6E,gBAAAA,IAAI,EAAE;AAAf,eAFc,EAGd;AAAE7E,gBAAAA,EAAE,EAAE,CAAN;AAAS6E,gBAAAA,IAAI,EAAE;AAAf,eAHc,CADI;AAOpB,mBAAK3E,QAAL,CAAc;AAAE4E,gBAAAA,aAAa,EAAE7E;AAAjB,eAAd;;AAPoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlOH;;AAAA,UA4OnB8E,mBA5OmB;AAAA,2EA4OG,kBAAOpF,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBuC,gBAAAA,QADgB,GACL8C,QAAQ,CAACC,iBAAT,CAA2B,iBAA3B,EAA8C,CAA9C,EAAiDC,KAD5C;;AAAA,qBAGhBvF,QAHgB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKIL,KAAK,CAAC,iBAAD,EAAoB;AAC7CM,kBAAAA,MAAM,EAAE,MADqC;AAE7CC,kBAAAA,OAAO,EAAE,IAAIC,OAAJ,EAFoC;AAG7CC,kBAAAA,IAAI,EAAE;AAAEC,oBAAAA,EAAE,EAAEL;AAAN;AAHuC,iBAApB,CALT;;AAAA;AAKZM,gBAAAA,OALY;AAAA,kDAWX,MAAKC,QAAL,CAAc;AAAEiF,kBAAAA,eAAe,EAAElF,OAAO,CAACF,IAAR,CAAa,CAAb,EAAgBkD;AAAnC,iBAAd,CAXW;;AAAA;AAcpB,sBAAK/C,QAAL,CAAc;AACZiF,kBAAAA,eAAe,EAAEjD;AADL,iBAAd;;AAdoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA5OH;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAgQnBkD,aAhQmB,GAgQH,UAACC,GAAD,EAAS;AACvB,YAAKnF,QAAL,CAAc;AAAEoF,QAAAA,UAAU,EAAED;AAAd,OAAd;AACD,KAlQkB;;AAAA,UAoQnB3D,aApQmB;AAAA,2EAoQH,kBAAO/B,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACVsB,gBAAAA,UADU,GACG,CADH;;AAEd,oBAAIR,cAAc,CAACsB,OAAf,CAAuB,OAAvB,CAAJ,EAAqC;AACnCd,kBAAAA,UAAU,GAAGF,IAAI,CAACC,KAAL,CAAWP,cAAc,CAACsB,OAAf,CAAuB,OAAvB,CAAX,EAA4Cd,UAAzD;AACD,iBAFD,MAEO;AACLA,kBAAAA,UAAU,GAAG,MAAKW,KAAL,CAAWX,UAAxB;AACD,iBANa,CAQd;;;AACQsE,gBAAAA,WATM,GASU,MAAK3D,KATf,CASN2D,WATM;AAWRC,gBAAAA,GAXQ,GAWF;AACV7F,kBAAAA,QAAQ,EAAEA,QADA;AAEVsB,kBAAAA,UAAU,EAAEL,MAAM,CAACK,UAAD,CAFR;AAGVsE,kBAAAA,WAAW,EAAEA;AAHH,iBAXE,EAiBd;;AAjBc;AAAA,uBAkBKjG,KAAK,CAAC,iBAAD,EAAoB;AAC1CM,kBAAAA,MAAM,EAAE,MADkC;AAE1CC,kBAAAA,OAAO,EAAE,IAAIC,OAAJ,EAFiC;AAG1CC,kBAAAA,IAAI,EAAEyF;AAHoC,iBAApB,CAlBV;;AAAA;AAkBRzF,gBAAAA,IAlBQ;AAwBd;AACM0F,gBAAAA,SAzBQ,GAyBI,MAAKvE,WAAL,CAAiBnB,IAAI,CAACA,IAAL,CAAU2F,KAA3B,CAzBJ;AAAA,kDA2BP,MAAKxF,QAAL,CAAc;AACnByF,kBAAAA,UAAU,EAAE5F,IAAI,CAACA,IAAL,CAAU6F,IADH;AAEnBC,kBAAAA,SAAS,EAAE9F,IAAI,CAACA,IAAL,CAAU2F,KAFF;AAGnBI,kBAAAA,cAAc,EAAEL,SAAS,CAACnD;AAHP,iBAAd,CA3BO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OApQG;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAsSnBpB,WAtSmB,GAsSL,UAAUwB,GAAV,EAAe;AAC3B,UAAIqD,MAAM,GAAG,IAAIC,MAAJ,EAAb,CAD2B,CAG3B;;AACA,UAAI1D,QAAQ,GAAG,CACb;AACE3C,QAAAA,QAAQ,EAAE,CADZ;AAEEkD,QAAAA,KAAK,EAAE,MAFT;AAGEC,QAAAA,QAAQ,EAAE,MAHZ;AAIE/C,QAAAA,IAAI,EAAE,IAAIgD,IAAJ,EAJR;AAKEC,QAAAA,QAAQ,EAAE,CALZ;AAMEC,QAAAA,MAAM,EAAE,CANV;AAOE7C,QAAAA,KAAK,EAAE;AAPT,OADa,CAAf;AAJ2B,wBAgBgB,KAAKwB,KAhBrB;AAAA,UAgBnB2D,WAhBmB,eAgBnBA,WAhBmB;AAAA,UAgBNU,iBAhBM,eAgBNA,iBAhBM,EAkB3B;;AACA,UAAIhF,UAAU,GAAG,CAAjB;;AACA,UAAIR,cAAc,CAACsB,OAAf,CAAuB,OAAvB,CAAJ,EAAqC;AACnCd,QAAAA,UAAU,GAAGF,IAAI,CAACC,KAAL,CAAWP,cAAc,CAACsB,OAAf,CAAuB,OAAvB,CAAX,EAA4Cd,UAAzD;AACD,OAFD,MAEO;AACLA,QAAAA,UAAU,GAAG,KAAKW,KAAL,CAAWX,UAAxB;AACD,OAxB0B,CA0B3B;;;AACA,UAAMiF,SAAS,GAAG1D,IAAI,CAACC,IAAL,CAAUC,GAAG,GAAG6C,WAAhB,IAA+BU,iBAAjD,CA3B2B,CA6B3B;;AACA,UAAME,WAAW,GAAG3D,IAAI,CAACC,IAAL,CAAUxB,UAAU,GAAGgF,iBAAvB,CAApB;AACA,WAAK/F,QAAL,CAAc;AAAEkG,QAAAA,WAAW,EAAED,WAAf;AAA4BlF,QAAAA,UAAU,EAAEA;AAAxC,OAAd,EA/B2B,CAiC3B;;AACA,UAAIkF,WAAW,GAAGD,SAAlB,EAA6B;AAC3B,aAAKhG,QAAL,CAAc;AAAEmG,UAAAA,gBAAgB,EAAE;AAApB,SAAd;AACD,OAFD,MAEO;AACL,aAAKnG,QAAL,CAAc;AAAEmG,UAAAA,gBAAgB,EAAE;AAApB,SAAd;AACD,OAtC0B,CAwC3B;;;AACA,UAAIF,WAAW,GAAG,CAAlB,EAAqB;AACnB,aAAKjG,QAAL,CAAc;AAAEoG,UAAAA,eAAe,EAAE;AAAnB,SAAd;AACD,OAFD,MAEO;AACL,aAAKpG,QAAL,CAAc;AAAEoG,UAAAA,eAAe,EAAE;AAAnB,SAAd;AACD;;AAED,UAAIC,KAAK,GAAGJ,WAAZ;;AACA,UAAII,KAAK,KAAK,CAAd,EAAiB;AACfA,QAAAA,KAAK,GAAG,CAACA,KAAK,GAAG,CAAT,IAAcN,iBAAd,GAAkC,CAA1C;AACD;;AAED,UAAIO,GAAG,GAAGhE,IAAI,CAACC,IAAL,CAAUC,GAAG,GAAG6C,WAAhB,CAAV;;AACA,UAAIiB,GAAG,GAAGP,iBAAV,EAA6B;AAC3BO,QAAAA,GAAG,GAAGD,KAAK,GAAGN,iBAAR,GAA4B,CAAlC;;AAEA,YAAIO,GAAG,GAAGN,SAAS,GAAG,EAAtB,EAA0B;AACxBM,UAAAA,GAAG,GAAGN,SAAS,GAAG,EAAlB;AACD;AACF;;AAED,WAAKK,KAAL,EAAYA,KAAK,IAAIC,GAArB,EAA0BD,KAAK,EAA/B,EAAmC;AACjCjE,QAAAA,QAAQ,CAACK,IAAT,CAAc4D,KAAd;AACD;;AAEDR,MAAAA,MAAM,CAAC,UAAD,CAAN,GAAqBzD,QAArB;AACA,aAAOyD,MAAP;AACD,KAzWkB;;AAAA,UA2WnBU,YA3WmB,GA2WJ,UAACxF,UAAD,EAAatB,QAAb,EAA0B;AACvC,UAAM6B,aAAa,GAAG;AAAEP,QAAAA,UAAU,EAAEA,UAAd;AAA0BtB,QAAAA,QAAQ,EAAEA;AAApC,OAAtB;AACAc,MAAAA,cAAc,CAACa,OAAf,CAAuB,OAAvB,EAAgCP,IAAI,CAACU,SAAL,CAAeD,aAAf,CAAhC;AAEA,aAAO,MAAKE,aAAL,CAAmB/B,QAAnB,CAAP;AACD,KAhXkB;;AAEjB,UAAKiC,KAAL;AACE2B,MAAAA,KAAK,EAAE,KADT;AAEEC,MAAAA,KAAK,EAAE,KAFT;AAGEC,MAAAA,OAAO,EAAE,EAHX;AAIEiD,MAAAA,MAAM,EAAE,KAJV;AAKExC,MAAAA,WAAW,EAAE,KALf;AAMEtB,MAAAA,SAAS,EAAE,EANb;AAOEjC,MAAAA,SAAS,EAAE,CAPb;AAQEgB,MAAAA,UAAU,EAAE,EARd;AASEuB,MAAAA,aAAa,EAAE,EATjB;AAUEC,MAAAA,WAAW,EAAE,EAVf;AAWEjB,MAAAA,QAAQ,EAAE,EAXZ;AAYEyB,MAAAA,OAAO,EAAE,EAZX;AAaE5D,MAAAA,IAAI,EAAE,EAbR;AAcEO,MAAAA,IAAI,EAAE,EAdR;AAeEH,MAAAA,QAAQ,EAAE,CAfZ;AAgBEmF,MAAAA,UAAU,EAAE;AAhBd,iDAiBY,EAjBZ,6CAkBY,EAlBZ,8CAmBa,EAnBb,kDAoBiB,EApBjB,oDAqBmB,EArBnB,+CAsBc,EAtBd,8CAuBa,IAvBb,mDAwBkB,EAxBlB,+CAyBc,CAzBd,gDA0Be,CA1Bf,gDA2Be,CA3Bf,oDA4BmB,KA5BnB,qDA6BoB,KA7BpB,sDA8BqB,EA9BrB;AAFiB;AAkClB;;;;wCAEmB;AAClB,WAAK/D,YAAL;;AACA,WAAKqD,mBAAL;;AAEA,UAAInE,cAAc,CAAC8C,KAAf,IAAwB9C,cAAc,CAACiD,EAA3C,EAA+C;AAC7C,aAAKxD,QAAL,CAAc;AACZqD,UAAAA,KAAK,EAAExC,IAAI,CAACC,KAAL,CAAWP,cAAc,CAAC8C,KAA1B,EAAiCvD,EAD5B;AAEZwD,UAAAA,KAAK,EAAEzC,IAAI,CAACC,KAAL,CAAWP,cAAc,CAAC8C,KAA1B,EAAiCC,KAF5B;AAGZC,UAAAA,OAAO,EAAE1C,IAAI,CAACC,KAAL,CAAWP,cAAc,CAACiD,EAA1B,CAHG;AAIZC,UAAAA,OAAO,EAAE5C,IAAI,CAACC,KAAL,CAAWP,cAAc,CAAC8C,KAA1B,EAAiCI;AAJ9B,SAAd;AAMD;;AAED,UAAIlD,cAAc,CAACK,KAAnB,EAA0B;AACxB,aAAKD,aAAL;AACD;AACF;;;6BA8TQ;AAAA,yBA4BH,KAAKe,KA5BF;AAAA,UAEL2B,KAFK,gBAELA,KAFK;AAAA,UAGLC,KAHK,gBAGLA,KAHK;AAAA,UAILC,OAJK,gBAILA,OAJK;AAAA,UAKLS,WALK,gBAKLA,WALK;AAAA,UAMLtB,SANK,gBAMLA,SANK;AAAA,UAOLM,aAPK,gBAOLA,aAPK;AAAA,UAQLC,WARK,gBAQLA,WARK;AAAA,UASLxC,SATK,gBASLA,SATK;AAAA,UAULgD,OAVK,gBAULA,OAVK;AAAA,UAWL5D,IAXK,gBAWLA,IAXK;AAAA,UAYLO,IAZK,gBAYLA,IAZK;AAAA,UAaLH,QAbK,gBAaLA,QAbK;AAAA,UAcLmF,UAdK,gBAcLA,UAdK;AAAA,UAeLd,QAfK,gBAeLA,QAfK;AAAA,UAgBLE,SAhBK,gBAgBLA,SAhBK;AAAA,UAiBLI,aAjBK,gBAiBLA,aAjBK;AAAA,UAkBLK,eAlBK,gBAkBLA,eAlBK;AAAA,UAmBLQ,UAnBK,gBAmBLA,UAnBK;AAAA,UAoBLE,SApBK,gBAoBLA,SApBK;AAAA,UAqBLC,cArBK,gBAqBLA,cArBK;AAAA,UAsBL7E,UAtBK,gBAsBLA,UAtBK;AAAA,UAuBL0F,WAvBK,gBAuBLA,WAvBK;AAAA,UAwBLL,eAxBK,gBAwBLA,eAxBK;AAAA,UAyBLD,gBAzBK,gBAyBLA,gBAzBK;AAAA,UA0BLD,WA1BK,gBA0BLA,WA1BK;AAAA,UA2BLH,iBA3BK,gBA2BLA,iBA3BK;AAAA,UA+BL7C,MA/BK,GA2CH,IA3CG,CA+BLA,MA/BK;AAAA,UAgCLU,OAhCK,GA2CH,IA3CG,CAgCLA,OAhCK;AAAA,UAiCLE,YAjCK,GA2CH,IA3CG,CAiCLA,YAjCK;AAAA,UAkCL4C,UAlCK,GA2CH,IA3CG,CAkCLA,UAlCK;AAAA,UAmCLzF,WAnCK,GA2CH,IA3CG,CAmCLA,WAnCK;AAAA,UAoCLgD,cApCK,GA2CH,IA3CG,CAoCLA,cApCK;AAAA,UAqCL9D,QArCK,GA2CH,IA3CG,CAqCLA,QArCK;AAAA,UAsCLX,WAtCK,GA2CH,IA3CG,CAsCLA,WAtCK;AAAA,UAuCL4E,kBAvCK,GA2CH,IA3CG,CAuCLA,kBAvCK;AAAA,UAwCLS,mBAxCK,GA2CH,IA3CG,CAwCLA,mBAxCK;AAAA,UAyCLK,aAzCK,GA2CH,IA3CG,CAyCLA,aAzCK;AAAA,UA0CL1D,aA1CK,GA2CH,IA3CG,CA0CLA,aA1CK;AA6CP,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE8B,KADT;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,KAAK,EAAEF,KAHT;AAIE,QAAA,WAAW,EAAEW,WAJf;AAKE,QAAA,YAAY,EAAEF,YALhB;AAME,QAAA,UAAU,EAAE4C,UANd;AAOE,QAAA,SAAS,EAAEhE,SAPb;AAQE,QAAA,aAAa,EAAEM,aARjB;AASE,QAAA,WAAW,EAAEC,WATf;AAUE,QAAA,SAAS,EAAExC,SAVb;AAWE,QAAA,WAAW,EAAEQ,WAXf;AAYE,QAAA,cAAc,EAAEgD,cAZlB;AAaE,QAAA,OAAO,EAAER,OAbX;AAcE,QAAA,IAAI,EAAE5D,IAdR;AAeE,QAAA,IAAI,EAAEO,IAfR;AAgBE,QAAA,QAAQ,EAAEH,QAhBZ;AAiBE,QAAA,QAAQ,EAAEE,QAjBZ;AAkBE,QAAA,WAAW,EAAEX,WAlBf;AAmBE,QAAA,QAAQ,EAAE8E,QAnBZ;AAoBE,QAAA,SAAS,EAAEE,SApBb;AAqBE,QAAA,kBAAkB,EAAEJ,kBArBtB;AAsBE,QAAA,aAAa,EAAEQ,aAtBjB;AAuBE,QAAA,eAAe,EAAEK,eAvBnB;AAwBE,QAAA,mBAAmB,EAAEJ,mBAxBvB;AAyBE,QAAA,aAAa,EAAEK,aAzBjB;AA0BE,QAAA,UAAU,EAAEE,UA1Bd;AA2BE,QAAA,UAAU,EAAEK,UA3Bd;AA4BE,QAAA,SAAS,EAAEE,SA5Bb;AA6BE,QAAA,aAAa,EAAEnE,aA7BjB;AA8BE,QAAA,cAAc,EAAEoE,cA9BlB;AA+BE,QAAA,UAAU,EAAE7E,UA/Bd;AAgCE,QAAA,WAAW,EAAE0F,WAhCf;AAiCE,QAAA,eAAe,EAAEL,eAjCnB;AAkCE,QAAA,gBAAgB,EAAED,gBAlCpB;AAmCE,QAAA,WAAW,EAAED,WAnCf;AAoCE,QAAA,iBAAiB,EAAEH,iBApCrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AA4CD;;;;EA5cqB7G,S;;AA+cxB,eAAeI,SAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Main } from \"./index\";\n\nimport axios from \"axios\";\nimport queryString from \"query-string\";\n\nclass realFinal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      login: false,\n      admin: false,\n      user_ip: \"\",\n      signup: false,\n      login_modal: false,\n      list_data: [],\n      list_page: 1,\n      list_limit: 10,\n      list_all_page: [],\n      list_search: \"\",\n      category: \"\",\n      user_id: \"\",\n      data: \"\",\n      date: \"\",\n      like_num: 0,\n      like_exist: null,\n      like_num: \"\",\n      pre_view: \"\",\n      next_view: \"\",\n      category_data: [],\n      select_category: \"\",\n      reply_data: [],\n      reply_num: null,\n      reply_all_page: [],\n      reply_page: 1,\n      reply_limit: 2,\n      reply_block: 1,\n      reply_pre_block: false,\n      reply_next_block: false,\n      reply_block_limit: 10,\n    };\n  }\n\n  componentDidMount() {\n    this._getListData();\n    this._getAllCategoryData();\n\n    if (sessionStorage.login && sessionStorage.IP) {\n      this.setState({\n        login: JSON.parse(sessionStorage.login).id,\n        admin: JSON.parse(sessionStorage.login).admin,\n        user_ip: JSON.parse(sessionStorage.IP),\n        user_id: JSON.parse(sessionStorage.login).user_id,\n      });\n    }\n\n    if (sessionStorage.reply) {\n      this._setReplyPage();\n    }\n  }\n\n  _getAllLike = async (board_id) => {\n    const getData = await axios(\"/get/board_data\", {\n      method: \"POST\",\n      headers: new Headers(),\n      data: { id: board_id },\n    });\n\n    this.setState({ like_num: getData.data[0].likes });\n  };\n\n  _getData = async (board_id) => {\n    const getData = await axios(\"/get/board_data\", {\n      method: \"POST\",\n      headers: new Headers(),\n      data: { id: board_id },\n    });\n\n    // 날짜 구하기\n    const date =\n      getData.data[0].date.slice(0, 10) +\n      \" \" +\n      getData.data[0].date.slice(11, 16);\n\n    return this.setState({\n      data: getData,\n      date: date,\n      like_num: getData.data[0].likes,\n    });\n  };\n\n  _setPage = function () {\n    if (sessionStorage.page) {\n      this.setState({ list_page: Number(sessionStorage.page) });\n      return Number(sessionStorage.page);\n    }\n\n    this.setState({ list_page: 1 });\n    return 1;\n  };\n\n  _setReplyPage = function () {\n    if (sessionStorage.reply) {\n      // 댓글\n      const reply = JSON.parse(sessionStorage.reply);\n\n      this.setState({\n        reply_page: Number(reply.reply_page),\n      });\n\n      return this._getAllPage(reply.board_id);\n    }\n  };\n\n  _changePage = (el, board_id) => {\n    if (board_id === undefined) {\n      // 게시글 형태에서\n      this.setState({ list_page: el });\n      sessionStorage.setItem(\"page\", el);\n\n      return this._getListData();\n    } else {\n      // 댓글 형태에서\n      this.setState({ reply_page: el });\n      const reply_session = { reply_page: el, board_id: board_id };\n      sessionStorage.setItem(\"reply\", JSON.stringify(reply_session));\n\n      return this._getReplyData(board_id);\n    }\n  };\n\n  _getListData = async function () {\n    const { list_limit } = this.state;\n    const list_pages = this._setPage();\n\n    let categorys = \"\";\n    if (sessionStorage.getItem(\"category\")) {\n      categorys = sessionStorage.getItem(\"category\");\n    }\n\n    let search = \"\";\n    if (queryString.parse(this.props.location.search)) {\n      search = queryString.parse(this.props.location.search).search;\n    }\n\n    // Board 테이블 데이터 전체 수\n    const total_cnt = await axios(\"/get/board_cnt\", {\n      method: \"POST\",\n      headers: new Headers(),\n      data: { search: search, category: categorys },\n    });\n\n    // 데이터 가져오기\n    const total_list = await axios(\"/get/board\", {\n      method: \"POST\",\n      headers: new Headers(),\n      data: {\n        limit: list_limit,\n        page: list_pages,\n        search: search,\n        category: categorys,\n      },\n    });\n\n    // 전체 페이지 수 구하기\n    let page_arr = [];\n\n    for (let i = 1; i <= Math.ceil(total_cnt.data.cnt / list_limit); i++) {\n      page_arr.push(i);\n    }\n\n    this.setState({\n      list_data: [\n        {\n          board_id: 1,\n          title: \"테스트1\",\n          contents: \"테스트중\",\n          data: new Date(),\n          view_cnt: 1,\n          cat_id: 1,\n          likes: 1,\n        },\n      ],\n      list_all_page: page_arr,\n      list_search: search,\n    });\n  };\n\n  _login = (data) => {\n    sessionStorage.setItem(\"login\", JSON.stringify(data.suc));\n    sessionStorage.setItem(\"IP\", JSON.stringify(data.ip));\n\n    this.setState({\n      login: JSON.parse(sessionStorage.login).id,\n      admin: JSON.stringify(data.suc).admin,\n      user_ip: JSON.parse(sessionStorage.IP),\n      user_id: JSON.parse(sessionStorage.login).user_id,\n    });\n    return window.location.reload();\n  };\n\n  _logout = () => {\n    this.setState({ login: false, admin: false, user_ip: \"\" });\n\n    sessionStorage.removeItem(\"login\");\n    sessionStorage.removeItem(\"IP\");\n  };\n\n  _toggleModal = (boolean) => {\n    this.setState({ login_modal: boolean });\n  };\n\n  // 카테고리 변동\n  _changeCatgory = (target) => {\n    sessionStorage.setItem(\"category\", target);\n    return (window.location.href = \"/realFinal\");\n  };\n\n  _getPreAndNextData = async (board_id) => {\n    const category = sessionStorage.getItem(\"category\");\n\n    const res = await axios(\"/get/pre_and_next\", {\n      method: \"POST\",\n      headers: new Headers(),\n      data: { board_id: board_id, category: category },\n    });\n\n    this.setState({\n      pre_view: res.data.pre,\n      next_view: res.data.next,\n    });\n  };\n\n  _getAllCategoryData = async function () {\n    const getData = [\n      { id: 1, name: \"아침\" },\n      { id: 2, name: \"점심\" },\n      { id: 3, name: \"저녁\" },\n    ];\n\n    this.setState({ category_data: getData });\n  };\n\n  _selectCategoryData = async (board_id) => {\n    let category = document.getElementsByName(\"select_category\")[0].value;\n\n    if (board_id) {\n      // 수정 페이지일 경우 카테고리 변경\n      const getData = await axios(\"/get/board_data\", {\n        method: \"POST\",\n        headers: new Headers(),\n        data: { id: board_id },\n      });\n\n      return this.setState({ select_category: getData.data[0].cat_id });\n    }\n\n    this.setState({\n      select_category: category,\n    });\n  };\n\n  // like 여부 확인\n  _getLikeExist = (boo) => {\n    this.setState({ like_exist: boo });\n  };\n\n  _getReplyData = async (board_id) => {\n    var reply_page = 1;\n    if (sessionStorage.getItem(\"reply\")) {\n      reply_page = JSON.parse(sessionStorage.getItem(\"reply\")).reply_page;\n    } else {\n      reply_page = this.state.reply_page;\n    }\n\n    // 한 페이지에 불러올 댓글의 갯수 설정\n    const { reply_limit } = this.state;\n\n    const obj = {\n      board_id: board_id,\n      reply_page: Number(reply_page),\n      reply_limit: reply_limit,\n    };\n\n    // 데이터와 총 갯수 구하기\n    const data = await axios(\"/get/reply_data\", {\n      method: \"POST\",\n      headers: new Headers(),\n      data: obj,\n    });\n\n    // 페이징 정보 구해오기\n    const page_data = this._getAllPage(data.data.count);\n\n    return this.setState({\n      reply_data: data.data.rows,\n      reply_num: data.data.count,\n      reply_all_page: page_data.page_arr,\n    });\n  };\n\n  _getAllPage = function (cnt) {\n    let result = new Object();\n\n    // 전체 페이지 수 구하기\n    let page_arr = [\n      {\n        board_id: 1,\n        title: \"테스트1\",\n        contents: \"테스트중\",\n        data: new Date(),\n        view_cnt: 1,\n        cat_id: 1,\n        likes: 1,\n      },\n    ];\n\n    const { reply_limit, reply_block_limit } = this.state;\n\n    // 현재 페이지 구하기\n    let reply_page = 1;\n    if (sessionStorage.getItem(\"reply\")) {\n      reply_page = JSON.parse(sessionStorage.getItem(\"reply\")).reply_page;\n    } else {\n      reply_page = this.state.reply_page;\n    }\n\n    // 블록 최대 범위 (소수점 포함)\n    const max_block = Math.ceil(cnt / reply_limit) / reply_block_limit;\n\n    // 현재 페이지 위치를 블록 단위로 변환\n    const block_point = Math.ceil(reply_page / reply_block_limit);\n    this.setState({ reply_block: block_point, reply_page: reply_page });\n\n    // 다음 블록이 있는지 판단\n    if (block_point < max_block) {\n      this.setState({ reply_next_block: true });\n    } else {\n      this.setState({ reply_next_block: false });\n    }\n\n    // 이전 블록이 있는지 판단\n    if (block_point > 1) {\n      this.setState({ reply_pre_block: true });\n    } else {\n      this.setState({ reply_pre_block: false });\n    }\n\n    let start = block_point;\n    if (start !== 1) {\n      start = (start - 1) * reply_block_limit + 1;\n    }\n\n    let end = Math.ceil(cnt / reply_limit);\n    if (end > reply_block_limit) {\n      end = start + reply_block_limit - 1;\n\n      if (end > max_block * 10) {\n        end = max_block * 10;\n      }\n    }\n\n    for (start; start <= end; start++) {\n      page_arr.push(start);\n    }\n\n    result[\"page_arr\"] = page_arr;\n    return result;\n  };\n\n  _changeBlock = (reply_page, board_id) => {\n    const reply_session = { reply_page: reply_page, board_id: board_id };\n    sessionStorage.setItem(\"reply\", JSON.stringify(reply_session));\n\n    return this._getReplyData(board_id);\n  };\n\n  render() {\n    const {\n      login,\n      admin,\n      user_ip,\n      login_modal,\n      list_data,\n      list_all_page,\n      list_search,\n      list_page,\n      user_id,\n      data,\n      date,\n      like_num,\n      like_exist,\n      pre_view,\n      next_view,\n      category_data,\n      select_category,\n      reply_data,\n      reply_num,\n      reply_all_page,\n      reply_page,\n      replt_limit,\n      reply_pre_block,\n      reply_next_block,\n      reply_block,\n      reply_block_limit,\n    } = this.state;\n\n    const {\n      _login,\n      _logout,\n      _toggleModal,\n      _getSearch,\n      _changePage,\n      _changeCatgory,\n      _getData,\n      _getAllLike,\n      _getPreAndNextData,\n      _selectCategoryData,\n      _getLikeExist,\n      _getReplyData,\n    } = this;\n\n    return (\n      <div>\n        <div>\n          <Main\n            admin={admin}\n            user_ip={user_ip}\n            login={login}\n            login_modal={login_modal}\n            _toggleModal={_toggleModal}\n            _getSearch={_getSearch}\n            list_data={list_data}\n            list_all_page={list_all_page}\n            list_search={list_search}\n            list_page={list_page}\n            _changePage={_changePage}\n            _changeCatgory={_changeCatgory}\n            user_id={user_id}\n            data={data}\n            date={date}\n            like_num={like_num}\n            _getData={_getData}\n            _getAllLike={_getAllLike}\n            pre_view={pre_view}\n            next_view={next_view}\n            _getPreAndNextData={_getPreAndNextData}\n            category_data={category_data}\n            select_category={select_category}\n            _selectCategoryData={_selectCategoryData}\n            _getLikeExist={_getLikeExist}\n            like_exist={like_exist}\n            reply_data={reply_data}\n            reply_num={reply_num}\n            _getReplyData={_getReplyData}\n            reply_all_page={reply_all_page}\n            reply_page={reply_page}\n            replt_limit={replt_limit}\n            reply_pre_block={reply_pre_block}\n            reply_next_block={reply_next_block}\n            reply_block={reply_block}\n            reply_block_limit={reply_block_limit}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default realFinal;\n"]},"metadata":{},"sourceType":"module"}